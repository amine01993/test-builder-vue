rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {

        function isAuthenticated() {
            return request.auth.uid != null;
        }

        function belongToUser() {
            return resource.data.user_id == request.auth.uid;
        }

        function managedByUser() {
            return request.resource.data.user_id == request.auth.uid;
        }

        function validTest() {
            return isNonEmptyString(request.resource.data['name'])
                && request.resource.data['time_limit'] is number
                && request.resource.data['time_limit'] >= 0;
        }

        function checkTestUpdate() {
            return request.resource.data.diff(resource.data).unchangedKeys().hasAll(['questionCount', 'max_points', 'created_at', 'user_id']);
        }

        function validQuestion() {
            return isNonEmptyString(request.resource.data['text'])
                && request.resource.data['position'] is number;
        }

        function checkQuestionUpdate() {
            return request.resource.data.diff(resource.data).unchangedKeys().hasAll(['choiceCount', 'max_points', 'created_at', 'user_id']);
        }

        function validChoice() {
            return isNonEmptyString(request.resource.data['text'])
                && request.resource.data['points'] is number
                && request.resource.data['position'] is number;
        }

        function checkChoiceUpdate() {
            return request.resource.data.diff(resource.data).unchangedKeys().hasAll(['question', 'created_at', 'user_id']);
        }

        function isNonEmptyString(value) {
            return value is string && value.trim().size() > 0;
        }

        match /tests/{testId} {
            allow read: if isAuthenticated() && belongToUser();
            allow create: if isAuthenticated() && managedByUser() && validTest() 
                            && request.resource.data['max_points'] == 0 && request.resource.data['questionCount'] == 0;
            allow update: if isAuthenticated() && managedByUser() && validTest() && checkTestUpdate();
            allow delete: if isAuthenticated() && belongToUser();

            match /questions/{questionId} {
                allow read: if isAuthenticated() && belongToUser();
                allow create: if isAuthenticated() && managedByUser() && validQuestion() 
                                && request.resource.data['max_points'] == 0 && request.resource.data['choiceCount'] == 0;
                allow update: if isAuthenticated() && managedByUser() && validQuestion() && checkQuestionUpdate();
                allow delete: if isAuthenticated() && belongToUser();

                match /choices/{choiceId} {
                    allow read: if isAuthenticated() && belongToUser();
                    allow create: if isAuthenticated() && managedByUser() && validChoice();
                    allow update: if isAuthenticated() && managedByUser() && validChoice() && checkChoiceUpdate();
                    allow delete: if isAuthenticated() && belongToUser();
                }
            }
        }

        match /user_tests/{userTestId} {

            function belongToUser() {
                return resource.data.test.user_id == request.auth.uid;
            }

            function belongToTestTaker() {
                return resource.data.user_id == request.auth.uid;
            }
            
            allow get: if isAuthenticated() && (belongToUser() || belongToTestTaker());
            allow list: if isAuthenticated() && belongToUser();
            allow write: if false;
        }

        match /contacts/{contactId} {
            function validInfo() {
                return isNonEmptyString(request.resource.data['name'])
                    && isNonEmptyString(request.resource.data['email'])
                    && isNonEmptyString(request.resource.data['message']);
            }

            allow read: if false;
            allow create: if isAuthenticated() && managedByUser() && validInfo();
            allow update: if false;
            allow delete: if false;
        }
    }
}